name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Format check with Black
      run: |
        black --check --line-length 100 engine/ tools/
    
    - name: Lint with Ruff
      run: |
        ruff check engine/ tools/
    
    - name: Type check with MyPy
      run: |
        mypy engine/ tools/ --ignore-missing-imports --pretty --show-error-codes
    
    - name: Validate world content
      run: |
        python tools/validate.py world/world.json
    
    - name: Check for unreachable content
      run: |
        python tools/list_unreachable.py world/world.json
    
    - name: Test engine startup
      run: |
        timeout 10s python engine/engine_min.py world/world.json || true
      # Note: timeout expected since engine waits for input

  content-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Extended content validation
      run: |
        echo "=== World Structure Validation ==="
        python tools/validate.py world/world.json
        
        echo "=== Connectivity Analysis ==="
        python tools/list_unreachable.py world/world.json
        
        echo "=== Module Merge Test ==="
        if [ -d "world/modules" ] && [ "$(ls -A world/modules 2>/dev/null)" ]; then
          python tools/merge_modules.py --world world/world.json --modules world/modules --output /tmp/merged_world.json
          python tools/validate.py /tmp/merged_world.json
        else
          echo "No modules directory found, skipping module merge test"
        fi
    
    - name: Check for common issues
      run: |
        echo "=== Checking for common content issues ==="
        
        # Check for missing locked_title in starts
        python -c "
        import json
        with open('world/world.json') as f:
            world = json.load(f)
        
        missing_locked_titles = []
        for start in world.get('starts', []):
            if start.get('locked') and not start.get('locked_title'):
                missing_locked_titles.append(start.get('id', 'unnamed'))
        
        if missing_locked_titles:
            print(f'WARNING: Locked starts missing locked_title: {missing_locked_titles}')
        else:
            print('âœ“ All locked starts have locked_title')
        "
        
        # Verify faction consistency
        python -c "
        import json
        with open('world/world.json') as f:
            world = json.load(f)
        
        factions = set(world.get('factions', []))
        print(f'Defined factions: {sorted(factions)}')
        
        # Could add more checks here for faction references in nodes
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install bandit
      run: |
        pip install bandit[toml]
    
    - name: Security scan with bandit
      run: |
        bandit -r engine/ tools/ -f json -o bandit-report.json || true
        bandit -r engine/ tools/
      continue-on-error: true
    
    - name: Upload security results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-results
        path: bandit-report.json